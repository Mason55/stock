[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "stock-analysis-system"
version = "1.0.0"
description = "一个高度可移植的现代化股票分析系统"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Stock Analysis Team"},
]
keywords = ["stock", "analysis", "finance", "trading", "ml"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
requires-python = ">=3.8"
dependencies = []

[project.optional-dependencies]
minimal = [
    "Flask==2.3.2",
    "Flask-CORS==4.0.0",
    "SQLAlchemy==2.0.19",
    "pandas==2.0.3",
    "numpy==1.24.3",
    "requests==2.31.0",
    "pydantic==2.1.1",
    "pydantic-settings==2.0.2",
    "python-dotenv==1.0.0",
    "PyYAML==6.0.1",
    "pytest==7.4.0"
]
base = [
    "stock-analysis-system[minimal]",
    "Flask-limiter==3.3.1",
    "psycopg2-binary==2.9.7",
    "redis==4.6.0",
    "pytest-cov==4.1.0"
]
ml = [
    "scikit-learn==1.3.0",
    "lightgbm==4.0.0",
    "xgboost==1.7.6",
    "shap==0.42.1",
    "celery==5.3.1",
    "kafka-python==2.0.2",
    "yfinance==0.2.21",
    "matplotlib==3.7.2",
    "seaborn==0.12.2",
    "plotly==5.15.0"
]
dev = [
    "stock-analysis-system[base]",
    "black==23.7.0",
    "isort==5.12.0",
    "flake8==6.0.0",
    "mypy==1.5.1",
    "pytest-mock==3.11.1",
    "pytest-asyncio==0.21.1",
    "pytest-flask==1.2.0",
    "coverage==7.2.7",
    "sphinx==7.1.2",
    "mkdocs==1.5.2",
    "ipython==8.14.0",
    "ipdb==0.13.13",
    "memory-profiler==0.60.0",
    "py-spy==0.3.14"
]
production = [
    "stock-analysis-system[base,ml]",
    "aiohttp>=3.8.0,<4.0.0",
    "websockets>=11.0.0,<12.0.0",
    "prometheus-client>=0.17.0,<1.0.0",
    "schedule>=1.2.0,<2.0.0"
]

[project.urls]
Homepage = "https://github.com/your-org/stock-analysis-system"
Documentation = "https://github.com/your-org/stock-analysis-system/docs"
Repository = "https://github.com/your-org/stock-analysis-system.git"
"Bug Tracker" = "https://github.com/your-org/stock-analysis-system/issues"

[project.scripts]
stock-api = "src.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "config*"]
exclude = ["tests*", "docs*", "examples*", "temp*"]

[tool.setuptools.package-data]
"*" = ["*.txt", "*.md", "*.yml", "*.yaml", "*.json"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | temp
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 100
known_first_party = ["src", "config"]

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "temp",
    ".venv",
    "venv"
]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
exclude = [
    "build/",
    "temp/",
    "examples/",
    "tests/"
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/temp/*",
    "*/__pycache__/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:"
]